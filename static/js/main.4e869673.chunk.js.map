{"version":3,"sources":["components/Search.js","components/Result.js","components/results.js","components/Popup.js","App.js","serviceWorker.js","index.js"],"names":["Search","handleInput","search","className","type","placeholder","onChange","onKeyDown","Result","result","openPopup","onClick","id","src","poster_path","alt","original_title","Results","results","map","key","Popup","selected","closePopup","release_date","vote_average","overview","App","useState","s","state","setState","apiUrl","e","target","value","prevState","axios","then","data","console","log","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"oQAmBeA,EAhBA,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,YAAaC,EAAa,EAAbA,OAC3B,OACI,6BACI,6BAASC,UAAU,kBACf,2BACIC,KAAK,OACLD,UAAU,YACVE,YAAY,kBACZC,SAAUL,EACVM,UAAWL,O,gBCchBM,G,MArBA,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,OAAQC,EAAgB,EAAhBA,UAGtB,OAEI,yBAAKP,UAAU,OAAOQ,QAAS,kBAAMD,EAAUD,EAAOG,MAIlD,yBAAKT,UAAU,UACX,yBAAKU,IATJ,kDASqBJ,EAAOK,YAAaC,IAAI,MAElD,yBAAKZ,UAAU,WACX,4BAAKM,EAAOO,oBCHbC,EAXC,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,QAASR,EAAgB,EAAhBA,UAExB,OAEI,6BAASP,UAAU,WACde,EAAQC,KAAI,SAAAV,GAAM,OAAI,kBAAC,EAAD,CAAQW,IAAKX,EAAOG,GAAIH,OAAQA,EAAQC,UAAWA,SCkBvEW,EAzBD,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,SAAUC,EAAiB,EAAjBA,WAEvB,OACI,6BAASpB,UAAU,SACf,yBAAKA,UAAU,WACX,4BACKmB,EAASN,eACV,8BACKM,EAASE,eAGlB,uBAAGrB,UAAU,UAAb,WACamB,EAASG,cAGtB,yBAAKtB,UAAU,QACX,yBAAKU,IAfR,kDAeyBS,EAASR,YAAaC,IAAI,KAChD,2BAAIO,EAASI,WAEjB,4BAAQvB,UAAU,QAAQQ,QAASY,GAAnC,YCwEDI,MAjFf,WAAgB,IAAD,EACaC,mBAAS,CACjCC,EAAG,GACHpB,OAAQ,GACRa,SAAU,KAJC,mBACNQ,EADM,KACCC,EADD,KAOPC,EAAM,qFAiDZ,OACE,6BACE,gCACE,+CAGF,8BACE,kBAAC,EAAD,CAAQ/B,YApCM,SAACgC,GACnB,IAAIJ,EAAII,EAAEC,OAAOC,MAEjBJ,GAAS,SAAAK,GACP,OAAO,eAAKA,EAAZ,CAAuBP,EAAGA,QAgCU3B,OApDzB,SAAC+B,GACA,UAAVA,EAAEb,KACJiB,IAAML,EAAS,UAAYF,EAAMD,GAC9BS,MAAK,YAAe,IAAZC,EAAW,EAAXA,KACH9B,EAAS8B,EAAKrB,QAClBa,GAAS,SAAAK,GACP,OAAO,eAAKA,EAAZ,CAAuB3B,OAAQA,OAGjC+B,QAAQC,IAAIF,SA6Cd,yBAAKpC,UAAU,YACb,kBAAC,EAAD,CAASe,QAASY,EAAMrB,OAAQC,UA7BtB,SAAAE,GAChB4B,QAAQC,IAAI7B,GAEZyB,IAAML,EAAS,UAAYpB,GACxB0B,MAAK,YAAe,IACf7B,EADc,EAAX8B,KAEPR,GAAS,SAAAK,GACP,OAAO,eAAKA,EAAZ,CAAuBd,SAAUb,gBA0BlCqB,EAAMR,SAASV,IAAK,kBAAC,EAAD,CAAOU,SAAUQ,EAAMR,SAAUC,WArBzC,WACjBQ,GAAS,SAAAK,GACP,OAAO,eAAKA,EAAZ,CAAuBd,SAAU,cCnDnBoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhB,MAAK,SAAAiB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlB,QAAQkB,MAAMA,EAAMC,c","file":"static/js/main.4e869673.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst Search = ({ handleInput, search }) => {\n    return (\n        <div>\n            <section className=\"searchbox-wrap\" >\n                <input\n                    type=\"text\"\n                    className=\"searchbox\"\n                    placeholder=\"Search A Movie \"\n                    onChange={handleInput}\n                    onKeyDown={search}\n                />\n            </section>\n        </div>\n    );\n}\n\nexport default Search;\n\n\n","import React from 'react';\nimport './cardStyle.css'\n\n\n\nconst Result = ({ result, openPopup }) => {\n    var imagePath = `https://image.tmdb.org/t/p/w300_and_h450_bestv2`;\n\n    return (\n\n        <div className=\" box\" onClick={() => openPopup(result.id)}>\n            {/* <img src={imagePath + result.poster_path} alt=\"\" />\n            <h3>{result.original_title}</h3> */}\n\n            <div className=\"imgBox\">\n                <img src={imagePath + result.poster_path} alt=\"\" />\n            </div>\n            <div className=\"content\">\n                <h3>{result.original_title}</h3>\n                {/* <span>{result.overview}</span> */}\n            </div>\n        </div>\n\n    );\n}\n\nexport default Result;","import React from 'react';\nimport Result from './Result';\n\n\nconst Results = ({ results, openPopup }) => {\n\n    return (\n\n        <section className=\"results\">\n            {results.map(result => <Result key={result.id} result={result} openPopup={openPopup} />)}\n        </section>\n\n    );\n}\n\nexport default Results;","import React from 'react';\n\nconst Popup = ({ selected, closePopup }) => {\n    var imagePath = `https://image.tmdb.org/t/p/w300_and_h450_bestv2`;\n    return (\n        <section className=\"popup\">\n            <div className=\"content\">\n                <h2>\n                    {selected.original_title}\n                    <span>\n                        {selected.release_date}\n                    </span>\n                </h2>\n                <p className=\"rating\">\n                    Rating: {selected.vote_average}\n                </p>\n\n                <div className=\"plot\">\n                    <img src={imagePath + selected.poster_path} alt=\"\" />\n                    <p>{selected.overview}</p>\n                </div>\n                <button className=\"close\" onClick={closePopup}>Close</button>\n            </div>\n        </section>\n    );\n}\n\nexport default Popup;","import React, { useState } from 'react';\nimport Search from './components/Search';\n\nimport axios from 'axios'\nimport Results from './components/results';\nimport Popup from './components/Popup';\n\n\n\n\n\n\nfunction App() {\n  const [state, setState] = useState({\n    s: \"\",\n    result: [],\n    selected: {}\n  })\n\n  const apiUrl = `https://api.themoviedb.org/3/search/movie?api_key=a3ce8e966aef0ecef3ec77d435bc9197`\n\n\n\n  const search = (e) => {\n    if (e.key === \"Enter\") {\n      axios(apiUrl + \"&query=\" + state.s)\n        .then(({ data }) => {\n          let result = data.results\n          setState(prevState => {\n            return { ...prevState, result: result }\n          })\n\n          console.log(data);\n\n        })\n    }\n  }\n\n\n  const handleInput = (e) => {\n    let s = e.target.value\n\n    setState(prevState => {\n      return { ...prevState, s: s }\n    })\n    // console.log(state.s);\n\n  }\n\n  const openPopup = id => {\n    console.log(id);\n\n    axios(apiUrl + \"&query=\" + id)\n      .then(({ data }) => {\n        let result = data;\n        setState(prevState => {\n          return { ...prevState, selected: result }\n        })\n      })\n  }\n\n  const closePopup = () => {\n    setState(prevState => {\n      return { ...prevState, selected: {} }\n    })\n  }\n\n\n  return (\n    <div >\n      <header >\n        <h1>Movie Database</h1>\n      </header>\n\n      <main>\n        <Search handleInput={handleInput} search={search} />\n\n        <div className=\"myResult\">\n          <Results results={state.result} openPopup={openPopup} />\n        </div>\n\n\n        {state.selected.id ? <Popup selected={state.selected} closePopup={closePopup} /> : false}\n\n\n      </main>\n\n\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}