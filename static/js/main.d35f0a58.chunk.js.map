{"version":3,"sources":["components/nav.js","components/Result.js","components/results.js","components/Popup.js","components/MySL.js","components/mainPage.js","components/Search.js","components/SearchResult.js","App.js","serviceWorker.js","index.js"],"names":["NavSearch","className","to","Result","result","openPopup","onClick","id","src","poster_path","alt","original_title","Results","results","map","key","Popup","selected","closePopup","release_date","vote_average","overview","MyTrying","title","sub","apiUrl","useState","cat","setCat","info","fetch","then","res","json","data","console","log","useEffect","infinite","speed","slidesToShow","slidesToScroll","initialSlide","responsive","breakpoint","settings","dots","MainPage","s","state","setState","axios","prevState","Search","handleInput","search","type","placeholder","onChange","onKeyDown","SearchResult","e","target","value","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d35f0a58.chunk.js","sourcesContent":["import React from 'react'\nimport { Link } from 'react-router-dom'\n\nexport default function NavSearch() {\n    return (\n        <div>\n            <ul className=\"nav-links\">\n                <Link className=\"links\" to=\"/\">\n                    <li className=\"links\">Home</li>\n                </Link>\n                <Link className=\"links\" to=\"/search\">\n                    <li className=\"links\">Search</li>\n                </Link>\n            </ul>\n        </div>\n    )\n}\n","import React from 'react';\nimport './cardStyle.css'\n\n\n\nconst Result = ({ result, openPopup }) => {\n    let imagePath = `https://image.tmdb.org/t/p/w300_and_h450_bestv2`;\n\n    return (\n\n        <div className=\"result box\" onClick={() => openPopup(result.id)}>\n            <div className=\"imgBox\">\n                <img src={imagePath + result.poster_path} alt=\"\" />\n            </div>\n            <div className=\"content\">\n                <h3>{result.original_title}</h3>\n            </div>\n        </div>\n\n    );\n}\n\nexport default Result;","import React from 'react';\nimport Result from './Result';\n\n\n\nconst Results = ({ results, openPopup }) => {\n\n    return (\n        <section className=\"results\">\n            {results.map(result =>\n                <Result key={result.id} result={result} openPopup={openPopup} />\n            )}\n        </section>\n\n\n    );\n}\n\nexport default Results;","import React from 'react';\n\nconst Popup = ({ selected, closePopup }) => {\n    var imagePath = `https://image.tmdb.org/t/p/w300_and_h450_bestv2`;\n    return (\n        <section className=\"popup\">\n            <div className=\"content\">\n                <h2>\n                    {selected.original_title}\n                    <span>\n                        {selected.release_date}\n                    </span>\n                </h2>\n                <p className=\"rating\">\n                    Rating: {selected.vote_average}\n                </p>\n\n                <div className=\"plot\">\n                    <img src={imagePath + selected.poster_path} alt=\"\" />\n                    <p>{selected.overview}</p>\n                </div>\n                <button className=\"close\" onClick={closePopup}>Close</button>\n            </div>\n        </section>\n    );\n}\n\nexport default Popup;","import React, { useState, useEffect } from 'react';\n\n\nimport Slider from \"react-slick\";\nimport \"slick-carousel/slick/slick.css\";\nimport \"slick-carousel/slick/slick-theme.css\";\n\n\n\n\n\nconst MyTrying = ({ title, sub }) => {\n    const apiUrl = `https://api.themoviedb.org/3/search/movie?api_key=a3ce8e966aef0ecef3ec77d435bc9197&query=${title}`\n    let imagePath = `https://image.tmdb.org/t/p/w300_and_h450_bestv2`;\n    const [cat, setCat] = useState(\"\")\n\n    const info = () => {\n        fetch(apiUrl)\n            .then(res => res.json())\n            .then(data => {\n                console.log(data);\n\n                setCat(data.results)\n            })\n    }\n    useEffect(() => {\n        setCat(info)\n    }, [])\n\n    var settings = {\n\n        infinite: false,\n        speed: 500,\n        slidesToShow: 8,\n        slidesToScroll: 4,\n        initialSlide: 0,\n        responsive: [\n            {\n                breakpoint: 1024,\n                settings: {\n                    slidesToShow: 3,\n                    slidesToScroll: 3,\n                    infinite: true,\n                    dots: true\n                }\n            },\n            {\n                breakpoint: 600,\n                settings: {\n                    slidesToShow: 3,\n                    slidesToScroll: 1,\n                    initialSlide: 2\n                }\n            },\n            {\n                breakpoint: 480,\n                settings: {\n                    slidesToShow: 2,\n                    slidesToScroll: 1\n                }\n            }\n        ]\n    };\n\n    return (\n        <div className=\"cont\">\n            <h4>{sub}</h4>\n            <Slider {...settings} className=\"slick\">\n                {cat ? cat.map(data =>\n                    (<div className=\"kenareham\">\n                        <div className='posterBox'>\n                            <img src={imagePath + data.poster_path} alt=\"\" />\n                        </div>\n                        <h3>{data.title}</h3>\n                        {/* <a style={linkstyle} href={<Popup />}>{data.title}</a> */}\n                    </div>))\n                    : null}\n            </Slider>\n        </div>\n    );\n}\n\nexport default MyTrying;","import React, { useState } from 'react';\n\nimport axios from 'axios'\nimport Results from './results';\nimport Popup from './Popup';\nimport MyTrying from './MySL';\n\n\n\nfunction MainPage() {\n    const [state, setState] = useState({\n        s: \"\",\n        result: [],\n        selected: {}\n    })\n\n    const apiUrl = `https://api.themoviedb.org/3/search/movie?api_key=a3ce8e966aef0ecef3ec77d435bc9197`\n\n\n    const search = (e) => {\n        if (e.key === \"Enter\") {\n            axios(apiUrl + \"&query=\" + state.s)\n                .then(({ data }) => {\n                    let result = data.results\n                    setState(prevState => {\n                        return { ...prevState, result: result }\n                    })\n                    console.log(data);\n                })\n        }\n    }\n\n\n    const handleInput = (e) => {\n        let s = e.target.value\n\n        setState(prevState => {\n            return { ...prevState, s: s }\n        })\n        // console.log(state.s);\n\n    }\n\n    const openPopup = id => {\n        console.log(id);\n\n        axios(apiUrl + \"&query=\" + id)\n            .then(({ data }) => {\n                let result = data;\n                setState(prevState => {\n                    return { ...prevState, selected: result }\n                })\n            })\n    }\n\n    const closePopup = () => {\n        setState(prevState => {\n            return { ...prevState, selected: {} }\n        })\n    }\n\n\n\n    return (\n        <div >\n\n            {/* <header >\n                <h1>Movie Finder</h1>\n            </header> */}\n\n            <div>\n                <MyTrying title=\"romantic\" sub='Romantic Movie' />\n            </div>\n            <div>\n                <MyTrying title=\"war\" sub='Action & War Movie' />\n            </div>\n            <div>\n                <MyTrying title=\"music\" sub='Musical Movie' />\n            </div>\n\n            {/* <div className=\"search-container\">\n                <Search handleInput={handleInput} search={search} />\n            </div> */}\n            <main>\n\n                <div className=\"myResult\">\n                    <Results results={state.result} openPopup={openPopup} />\n                </div>\n                {state.selected.id ? <Popup selected={state.selected} closePopup={closePopup} /> : false}\n            </main>\n\n\n        </div >\n    );\n}\n\nexport default MainPage;\n","import React from 'react';\n\n\nconst Search = ({ handleInput, search }) => {\n\n\n    return (\n        <div>\n            <section className=\"searchbox-wrap\" >\n                <input\n                    type=\"text\"\n                    className=\"searchbox\"\n                    placeholder=\"Search A Movie Name  \"\n                    onChange={handleInput}\n                    onKeyDown={search}\n                />\n            </section>\n        </div>\n    );\n}\n\nexport default Search;\n\n\n","import React, { useState } from 'react'\nimport Search from './Search'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport axios from 'axios'\nimport Results from './results'\n\nfunction SearchResult() {\n    const [state, setState] = useState({\n        s: \"\",\n        result: [],\n        selected: {}\n    })\n\n    const apiUrl = `https://api.themoviedb.org/3/search/movie?api_key=a3ce8e966aef0ecef3ec77d435bc9197`\n\n\n    const search = (e) => {\n        if (e.key === \"Enter\") {\n            axios(apiUrl + \"&query=\" + state.s)\n                .then(({ data }) => {\n                    let result = data.results\n                    setState(prevState => {\n                        return { ...prevState, result: result }\n                    })\n                    console.log(data);\n                })\n        }\n    }\n\n\n    const handleInput = (e) => {\n        let s = e.target.value\n\n        setState(prevState => {\n            return { ...prevState, s: s }\n        })\n    }\n    return (\n        <div >\n            <div className=\"container\">\n                <Search handleInput={handleInput} search={search} />\n            </div>\n\n            <div className=\"myResult\">\n                <Results results={state.result} />\n            </div>\n        </div>\n    )\n}\n\nexport default SearchResult\n","import React from 'react';\nimport { BrowserRouter as Router, Swich, Route } from 'react-router-dom'\nimport NavSearch from './components/nav';\nimport MainPage from './components/mainPage';\nimport SearchResult from './components/SearchResult';\n\n// import 'bootstrap/dist/css/bootstrap.min.css'\n\n\n\n\n\nfunction App() {\n\n\n  return (\n    <div>\n      <Router>\n        <NavSearch />\n        <Route path=\"/\" exact component={MainPage} />\n        <Route path=\"/search\" component={SearchResult} />\n      </Router>\n\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}